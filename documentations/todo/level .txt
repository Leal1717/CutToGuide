> vertical pipes in which there is only one area left open in which player c
an enter or exit --> flappyBirdPipes
> land areas in which the land can be go down --> createHole
> particular area in which the cycle will jump up a bit --> jumper
> enimes to be beware of -->EnimesWithNoGun
    >>const enimes who stick to land --type1
    >>jumpers -- type2
    >>underGroung movers -- type3
    >>come right at you -- type4
> random things present at top that will drop on when player reaches some x value.
		if collided by player the game over. some part of it is visible to player to get the idea and plan thar way

> buttons to open/close some part of area to block or open the area
> top placed player that will shoot on player
> enery ball that can be collected by player and when needed shoot to the player who are firirng at the player
> collectable keys that will open only particular locks. basically keys with colour red green blue with there respective 
		locks.if the player have the key there is no problem in the movement but if doesnt have then it will get
		collided with the door.
> rocks that can be breakable by bullets only if there is no bullet it will work as solod shape



> Hint Lines


temp


if (!paused) {
    if ((VariablesForPlayArea.shapeNumberSelected <= VariablesForPlayArea.CutOutBodies.size() + VariablesForPlayArea.powerUps.size() - 1)) {
        if (hardMove) {
            if (powerUpSelected){
                VariablesForPlayArea.powerUpPos.set(VariablesForPlayArea.shapeNumberSelected - VariablesForPlayArea.CutOutBodies.size(),
                        new Vector2(((((screenX - AllVariables.witdth_translation) / AllVariables.inpM) * camscl + (cam.position.x - AllVariables.WIDTH / 2))) - 250,
                                ((screenY / AllVariables.inpM) * camscl - 200 + (cam.position.y - AllVariables.HEIGHT / 2))+20));
            }else {

                VariablesForPlayArea.CutOutBodies.get(VariablesForPlayArea.shapeNumberSelected).setTransform(
                        ((((screenX - AllVariables.witdth_translation) / AllVariables.inpM) * camscl + (cam.position.x - AllVariables.WIDTH / 2)) / AllVariables.PPM) - VariablesForPlayArea.BigSqurePoints[0][0] / (2) / AllVariables.PPM,
                        (((screenY / AllVariables.inpM) * camscl - 200 + (cam.position.y - AllVariables.HEIGHT / 2)) / AllVariables.PPM) + VariablesForPlayArea.BigSqurePoints[12][1] / (2) / AllVariables.PPM,
                        (float) (VariablesForPlayArea.Angle_Of_Shape.get(VariablesForPlayArea.shapeNumberSelected) * (Math.PI / 180)));
            }

            return false;

        } else {
            if (!powerUpSelected) {
                //dragging of objects
                originX = screenX;
                originY = screenY;
                shapeX = VariablesForPlayArea.CutOutBodies.get(VariablesForPlayArea.shapeNumberSelected).getPosition().x;
                shapeY = VariablesForPlayArea.CutOutBodies.get(VariablesForPlayArea.shapeNumberSelected).getPosition().y;
            }

            return false;
        }
    }
}
}

